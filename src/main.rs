use std::{str::FromStr, collections::BTreeMap};
use evm::{
	executor::stack::StackState, 
	tracing::{EventListener, Event}, 
	execution_storage::{MemoryStorage, ExecutionBackend}, backend::{MemoryVicinity, MemoryAccount, MemoryBackend}};
use primitive_types::{U256, H160};
use tracing::{info, debug};
use tracing_subscriber::EnvFilter;
use tracing_subscriber::filter::LevelFilter;
use tracing::subscriber::set_global_default;
use futures::future::join_all;

#[tokio::main]
async fn main() {
	let _ = DebugEventListener::new();

	// tx_execution_serial();

	tx_execution_async().await;
}

async fn tx_execution_async() {
	let vicinity = MemoryVicinity { 
		gas_price: U256::zero(), 
		origin: H160::default(), 
		chain_id: U256::one(), 
		block_hashes: Vec::new(), 
		block_number: Default::default(), 
		block_coinbase: Default::default(), 
		block_timestamp: Default::default(), 
		block_difficulty: Default::default(), 
		block_gas_limit: Default::default(), 
		block_base_fee_per_gas: U256::zero(), //Gwei 
		block_randomness: None
	};
	let mut state = BTreeMap::new();
	state.insert(
		H160::from_str("0x1000000000000000000000000000000000000000").unwrap(),
		MemoryAccount {
			nonce: U256::one(),
			balance: U256::from(10000000),
			storage: BTreeMap::new(),
			code: hex::decode("608060405234801561001057600080fd5b50610c2e806100206000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b488b371461007d5780630be8374d146100f05780633a51d24614610163578063870187eb146101e0578063901d706f14610253578063ca30543514610302575b600080fd5b34801561008957600080fd5b506100ee600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506103bb565b005b3480156100fc57600080fd5b50610161600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506104a7565b005b34801561016f57600080fd5b506101ca600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610689565b6040518082815260200191505060405180910390f35b3480156101ec57600080fd5b50610251600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610778565b005b34801561025f57600080fd5b50610300600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610864565b005b34801561030e57600080fd5b506103b9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610a2c565b005b6000806000846040518082805190602001908083835b6020831015156103f657805182526020820191506020810190506020830392506103d1565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205491508290508082016000856040518082805190602001908083835b60208310151561046a5780518252602082019150602081019050602083039250610445565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208190555050505050565b60008060006001856040518082805190602001908083835b6020831015156104e457805182526020820191506020810190506020830392506104bf565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205492506000856040518082805190602001908083835b602083101515610552578051825260208201915060208101905060208303925061052d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054915083905081830181101561060f576001818403036001866040518082805190602001908083835b6020831015156105d357805182526020820191506020810190506020830392506105ae565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550610682565b8083036001866040518082805190602001908083835b60208310151561064a5780518252602082019150602081019050602083039250610625565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055505b5050505050565b600080600080846040518082805190602001908083835b6020831015156106c557805182526020820191506020810190506020830392506106a0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205491506001846040518082805190602001908083835b602083101515610733578051825260208201915060208101905060208303925061070e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054905080820192508292505050919050565b6000806001846040518082805190602001908083835b6020831015156107b3578051825260208201915060208101905060208303925061078e565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205491508290508082016001856040518082805190602001908083835b6020831015156108275780518252602082019150602081019050602083039250610802565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208190555050505050565b6000806000846040518082805190602001908083835b60208310151561089f578051825260208201915060208101905060208303925061087a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205491506001836040518082805190602001908083835b60208310151561090d57805182526020820191506020810190506020830392506108e8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054905060006001856040518082805190602001908083835b60208310151561097d5780518252602082019150602081019050602083039250610958565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055508082016000846040518082805190602001908083835b6020831015156109ef57805182526020820191506020810190506020830392506109ca565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208190555050505050565b60008060006001866040518082805190602001908083835b602083101515610a695780518252602082019150602081019050602083039250610a44565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205492506001856040518082805190602001908083835b602083101515610ad75780518252602082019150602081019050602083039250610ab2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054915083905080830392508082019150826001876040518082805190602001908083835b602083101515610b535780518252602082019150602081019050602083039250610b2e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550816001866040518082805190602001908083835b602083101515610bc35780518252602082019150602081019050602083039250610b9e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055505050505050505600a165627a7a7230582033f35ffa8e6ce327b6d4561993820c938a8cece4ffa6d56b262a97f83857bf510029").unwrap(),
		}
	);
	state.insert(
		H160::from_str("0xe14de1592b52481b94b99df4e9653654e14fffb6").unwrap(),
		MemoryAccount {
			nonce: U256::one(),
			balance: U256::from(10000000),
			storage: BTreeMap::new(),
			code: Vec::new(),
		},
	);

	let backend = MemoryBackend::new(vicinity, state);
	let mut handles = vec![];

	for i in 0..100 {
		let backend = backend.clone();

		handles.push(
			tokio::spawn(async move {
				let storage = MemoryStorage::new(backend, BTreeMap::new());
				let mut executor = storage.executor();

				let (reason, _) = executor.transact_call(
					H160::from_str("0xe14de1592b52481b94b99df4e9653654e14fffb6").unwrap(),
					H160::from_str("0x1000000000000000000000000000000000000000").unwrap(),
					U256::zero(),
					hex::decode("870187eb0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000053434373336000000000000000000000000000000000000000000000000000000")
						.unwrap(),
					// hex::decode("0f14a4060000000000000000000000000000000000000000000000000000000000002ee0").unwrap(),
					50002,
					Vec::new(),
				);
		
				info!("[thread-{i}]::{reason:?}");
				info!("[thread-{i}]::gas snapshot: {:?}", executor.state().metadata().gasometer().snapshot());
		}));
	}

	join_all(handles).await;
}

pub fn tx_execution_serial() {
	let mut execution_state = MemoryStorage::default();

	for _ in 0..10 {
		let mut executor = execution_state.executor();
		
		let (reason, _) = executor.transact_call(
			H160::from_str("0xe14de1592b52481b94b99df4e9653654e14fffb6").unwrap(),
			H160::from_str("0x1000000000000000000000000000000000000000").unwrap(),
			U256::zero(),
			hex::decode("870187eb0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000053434373336000000000000000000000000000000000000000000000000000000")
				.unwrap(),
			// hex::decode("0f14a4060000000000000000000000000000000000000000000000000000000000002ee0").unwrap(),
			50002,
			Vec::new(),
		);

		info!("{reason:?}");
		info!("gas snapshot: {:?}", executor.state().metadata().gasometer().snapshot());
		let (effects, logs) = executor.into_state().deconstruct();
		info!("{:?}", effects);
		info!("{:?}", logs);

		execution_state.apply_local_effect(effects, logs);
	}
}

struct DebugEventListener;

impl DebugEventListener {
	pub fn new() -> Self {
		// let custom_directive = "evm=trace";
		let filter = EnvFilter::builder()
			.with_default_directive(LevelFilter::INFO.into())
			.parse(format!(
				"debug"
			)).expect("fail to parse env for log filter");
	
		let env_filter = EnvFilter::try_from_default_env().unwrap_or(filter);
	
		let timer = tracing_subscriber::fmt::time::UtcTime::rfc_3339();
		let subscriber_builder = tracing_subscriber::fmt::Subscriber::builder()
			.with_env_filter(env_filter)
			.with_timer(timer)
			.with_ansi(false);
		let subscriber = subscriber_builder.with_writer(std::io::stderr).finish();
		set_global_default(subscriber).expect("Failed to set subscriber");
		Self {}
	}
}

impl EventListener for DebugEventListener {

	fn event(&mut self, event: Event<'_>) {
		debug!("{:?}", event);
	}
}